{"ast":null,"code":"/*! npm.im/get-canvas-pixel-color 2.0.1 */\n'use strict';\n\n/**\n * getCanvasPixelColor\n * @param  {canvas element|context} ctx  The canvas from which to take the color\n * @param  {int} x                       The x coordinate of the pixel to read\n * @param  {int} y                       The y coordinate of the pixel to read\n * @return {array/object}                The rgb values of the read pixel\n */\nvar index = function (ctx, x, y) {\n  // if it's not a context, it's probably a canvas element\n  if (!ctx.getImageData) {\n    ctx = ctx.getContext('2d');\n  }\n\n  // extract the pixel data from the canvas\n  var pixel = ctx.getImageData(x, y, 1, 1).data;\n\n  // set each color property\n  pixel.r = pixel[0];\n  pixel.g = pixel[1];\n  pixel.b = pixel[2];\n  pixel.a = pixel[3];\n\n  // convenience CSS strings\n  pixel.rgb = 'rgb(' + pixel.r + ',' + pixel.g + ',' + pixel.b + ')';\n  pixel.rgba = 'rgba(' + pixel.r + ',' + pixel.g + ',' + pixel.b + ',' + pixel.a + ')';\n  return pixel;\n};\nmodule.exports = index;","map":{"version":3,"names":["index","ctx","x","y","getImageData","getContext","pixel","data","r","g","b","a","rgb","rgba","module","exports"],"sources":["/Users/akhilakonam/Documents/TestWhiteboard/test-whiteboard/node_modules/get-canvas-pixel-color/dist/get-canvas-pixel-color.common-js.js"],"sourcesContent":["/*! npm.im/get-canvas-pixel-color 2.0.1 */\n'use strict';\n\n/**\n * getCanvasPixelColor\n * @param  {canvas element|context} ctx  The canvas from which to take the color\n * @param  {int} x                       The x coordinate of the pixel to read\n * @param  {int} y                       The y coordinate of the pixel to read\n * @return {array/object}                The rgb values of the read pixel\n */\nvar index = function (ctx, x, y) {\n\t// if it's not a context, it's probably a canvas element\n\tif (!ctx.getImageData) {\n\t\tctx = ctx.getContext('2d');\n\t}\n\n\t// extract the pixel data from the canvas\n\tvar pixel = ctx.getImageData(x, y, 1, 1).data;\n\n\t// set each color property\n\tpixel.r = pixel[0];\n\tpixel.g = pixel[1];\n\tpixel.b = pixel[2];\n\tpixel.a = pixel[3];\n\n\t// convenience CSS strings\n\tpixel.rgb = 'rgb('+pixel.r+','+pixel.g+','+pixel.b+')';\n\tpixel.rgba = 'rgba('+pixel.r+','+pixel.g+','+pixel.b+','+pixel.a+')';\n\n\treturn pixel;\n};\n\nmodule.exports = index;\n"],"mappings":"AAAA;AACA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,KAAK,GAAG,SAAAA,CAAUC,GAAG,EAAEC,CAAC,EAAEC,CAAC,EAAE;EAChC;EACA,IAAI,CAACF,GAAG,CAACG,YAAY,EAAE;IACtBH,GAAG,GAAGA,GAAG,CAACI,UAAU,CAAC,IAAI,CAAC;EAC3B;;EAEA;EACA,IAAIC,KAAK,GAAGL,GAAG,CAACG,YAAY,CAACF,CAAC,EAAEC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAACI,IAAI;;EAE7C;EACAD,KAAK,CAACE,CAAC,GAAGF,KAAK,CAAC,CAAC,CAAC;EAClBA,KAAK,CAACG,CAAC,GAAGH,KAAK,CAAC,CAAC,CAAC;EAClBA,KAAK,CAACI,CAAC,GAAGJ,KAAK,CAAC,CAAC,CAAC;EAClBA,KAAK,CAACK,CAAC,GAAGL,KAAK,CAAC,CAAC,CAAC;;EAElB;EACAA,KAAK,CAACM,GAAG,GAAG,MAAM,GAACN,KAAK,CAACE,CAAC,GAAC,GAAG,GAACF,KAAK,CAACG,CAAC,GAAC,GAAG,GAACH,KAAK,CAACI,CAAC,GAAC,GAAG;EACtDJ,KAAK,CAACO,IAAI,GAAG,OAAO,GAACP,KAAK,CAACE,CAAC,GAAC,GAAG,GAACF,KAAK,CAACG,CAAC,GAAC,GAAG,GAACH,KAAK,CAACI,CAAC,GAAC,GAAG,GAACJ,KAAK,CAACK,CAAC,GAAC,GAAG;EAEpE,OAAOL,KAAK;AACb,CAAC;AAEDQ,MAAM,CAACC,OAAO,GAAGf,KAAK","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}